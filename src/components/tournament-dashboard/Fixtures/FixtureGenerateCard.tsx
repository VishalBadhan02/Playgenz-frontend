import { useState } from "react";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { RefreshCw, Trophy } from "lucide-react";
import { useGamesAndFixtures } from "@/hooks/gamesAndFixtures";
import { Checkbox } from "@/components/ui/checkbox";

// Define the props for the FixtureGeneratorCard component
interface FixtureGeneratorCardProps {
    sport: string;
    fixtureMode: string;
    handleGenerateFixtures: (formData: any) => void;
    isPending: boolean;
}

export const FixtureGeneratorCard: React.FC<FixtureGeneratorCardProps> = ({
    handleGenerateFixtures,
    sport,
    fixtureMode,
    isPending
}) => {
    // Fetch teams data based on the selected sport
    const { data } = useGamesAndFixtures();
    const teams = data?.[sport] || [];

    // State variables for managing input fields
    const [tournamentFormat, setTournamentFormat] = useState("league");
    const [numGroups, setNumGroups] = useState("1");
    const [autoGenerateDates, setAutoGenerateDates] = useState("yes");
    const [randomize, setRandomize] = useState(false);
    const [allowByes, setAllowByes] = useState(false);
    const [startDate, setStartDate] = useState("");
    const [matchesPerDay, setMatchesPerDay] = useState("2");


    // Function to handle fixture generation
    const onGenerate = () => {
        const formData = {
            tournamentFormat,
            numGroups,
            autoGenerateDates,
            randomize,
            allowByes,
            startDate,
            matchesPerDay: Number(matchesPerDay),
        };
        handleGenerateFixtures(formData);
    };

    return (
        <Card>
            {/* Card Header */}
            <CardHeader>
                <CardTitle>Generate Fixtures</CardTitle>
                <CardDescription>
                    Create a match schedule for all registered teams
                </CardDescription>
            </CardHeader>


            {/* Card Content */}
            <CardContent className="space-y-4">
                {/* Input Fields */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Tournament Format */}
                    <div className="space-y-2">
                        <Label>Tournament Format</Label>
                        <Select value={tournamentFormat} onValueChange={setTournamentFormat}>
                            <SelectTrigger>
                                <SelectValue placeholder="Select format" />
                            </SelectTrigger>
                            <SelectContent>
                                {teams?.map((team: any, key: number) => (
                                    <SelectItem key={key} value={team?.value}>
                                        {team?.type}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>

                    {/* Number of Groups (Conditional) */}
                    {tournamentFormat === "group_stage" && (
                        <div className="space-y-2">
                            <Label>Number of Groups</Label>
                            <Select value={numGroups} onValueChange={setNumGroups}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select number of groups" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="1">1 Group</SelectItem>
                                    <SelectItem value="2">2 Groups</SelectItem>
                                    <SelectItem value="4">4 Groups</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                    )}

                    {/* Auto Generate Dates */}
                    <div className="space-y-2">
                        <Label>Auto Generate Dates</Label>
                        <Select value={autoGenerateDates} onValueChange={setAutoGenerateDates}>
                            <SelectTrigger>
                                <SelectValue placeholder="Auto-generate match dates?" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="yes">Yes</SelectItem>
                                <SelectItem value="no">No</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>

                    <div className="flex items-center space-x-2">
                        <Checkbox
                            id="randomize"
                            checked={randomize}
                            onCheckedChange={(checked) => setRandomize(!!checked)}
                        />
                        <Label htmlFor="randomize">Randomize Team Matchups</Label>
                    </div>

                    <div className="flex items-center space-x-2">
                        <Checkbox
                            id="allowByes"
                            checked={allowByes}
                            onCheckedChange={(checked) => setAllowByes(!!checked)}
                        />
                        <Label htmlFor="allowByes">Allow Byes</Label>
                    </div>
                    {/* Start Date */}
                    <div className="space-y-2">
                        <Label>Start Date</Label>
                        <Input
                            type="date"
                            value={startDate}
                            onChange={(e) => setStartDate(e.target.value)}
                        />
                    </div>

                    {/* Matches Per Day */}
                    <div className="space-y-2">
                        <Label>Matches Per Day</Label>
                        <Input
                            type="number"
                            min="1"
                            max="10"
                            value={matchesPerDay}
                            onChange={(e) => setMatchesPerDay(e.target.value)}
                        />
                    </div>
                </div>

                {/* Quick Settings */}
                <div className="pt-4">
                    <div className="rounded-lg border p-4 bg-muted/50">
                        <div className="flex items-center gap-2 mb-2">
                            <Trophy className="h-5 w-5 text-primary" />
                            <h3 className="font-medium">Quick Settings</h3>
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
                            <Button variant="outline" size="sm" className="justify-start w-full">
                                Weekends Only
                            </Button>
                            <Button variant="outline" size="sm" className="justify-start w-full">
                                Evenings Only
                            </Button>
                            <Button variant="outline" size="sm" className="justify-start w-full">
                                Balance Home/Away
                            </Button>
                        </div>
                    </div>
                </div>

                {/* Generate Button */}
                <div className="pt-4 flex justify-center">
                    <Button onClick={onGenerate} disabled={isPending} className="w-full">
                        {isPending ? (
                            <span className="animate-spin">Generating...</span>
                        ) : (
                            <div className="flex items-center">
                                <RefreshCw className="h-4 w-4 mr-2" />
                                Generate Fixtures
                            </div>
                        )}


                    </Button>
                </div>
            </CardContent>
        </Card>
    );
};  